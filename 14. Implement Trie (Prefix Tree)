/*
Implement a trie with insert, search, and startsWith methods.

Example:
Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

Note:
You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.
*/

class Trie {
    class TrieNode{
        public:
        bool ends = false;
        vector<TrieNode*> children;
        TrieNode(){
            for(int i=0;i<26;i++) children.push_back(NULL);
        }
    };
    TrieNode* root;
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* temp = root;
        for(char c : word){
            if(temp->children[c-'a'] == NULL)
                temp->children[c-'a'] = new TrieNode();
            temp = temp->children[c-'a'];  
        }
        temp->ends = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* temp = root;
        for(char c : word){
            if(temp->children[c-'a'] == NULL)
                return false;
            temp = temp->children[c-'a'];  
        }
        return temp->ends;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* temp = root;
        for(char c : prefix){
            if(temp->children[c-'a'] == NULL)
                return false;
            temp = temp->children[c-'a'];  
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
